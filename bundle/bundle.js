/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/client.js":
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/***/ (() => {

eval("/* eslint-env browser */\n\nlet rosterStr = '';\nlet rosterId = '';\n\nconst handleResponse = async (response, parseResponse, handlers) => {\n  /*\n  switch(response.status) {\n    case 200: //success\n      rosterResponse.innerHTML = `<b>Success</b>`;\n      break;\n    case 201: //created\n      rosterResponse.innerHTML = '<b>Created</b>';\n      break;\n    case 204: //updated (no response back from server)\n      rosterResponse.innerHTML = '<b>Updated</b>';\n      return; // won't hit the parse\n    case 400: //bad request\n      rosterResponse.innerHTML = `<b>Bad Request</b>`;\n      break;\n    case 404: //not found\n      rosterResponse.innerHTML = `<b>Not Found</b>`;\n      break;\n    case 500: //uh oh\n      rosterResponse.innerHTML = `<b>Internal Server Error</b>`;\n      break;\n    default: //any other status code\n      rosterResponse.innerHTML = `Error code not implemented by client.`;\n      break;\n  }\n  */\n\n  if (parseResponse) {\n    let obj = {};\n    if (response.status === 204) {\n      obj.message = 'Success - Updated';\n    } else {\n      obj = await response.json();\n    }\n\n    console.log(obj);\n\n    handlers.forEach((handler) => {\n      handler.function(obj, handler.data, response);\n    });\n  } else {\n    handlers.forEach((handler) => {\n      handler.function(response, handler.data);\n    });\n  }\n};\n\nconst sendFetch = async (action, handlers, shouldParse = true, type = 'application/json') => {\n  const response = await fetch(action, {\n    method: 'get',\n    headers: {\n      Accept: type,\n    },\n  });\n\n  handleResponse(response, shouldParse, handlers);\n};\n\nconst sendPost = async (action, body, handlers) => {\n  const response = await fetch(action, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json',\n    },\n    body,\n  });\n\n  handleResponse(response, true, handlers);\n};\n\n// requires string id of html element\nconst updateText = (message, id) => {\n  const responseElement = document.getElementById(id);\n\n  responseElement.innerHTML = message;\n};\n\n// requires string id of html element\nconst updateTextFromJSON = (obj, id) => {\n  updateText(obj.message, id);\n};\n\nconst removeMon = (monElement) => {\n\n};\n\nconst removeMonHandler = (obj, monElement) => {\n  removeMon(monElement);\n};\n\nconst removeMonFromRoster = (mon, monElement) => {\n  sendPost('removeMon', `?mon=${mon}&id=${rosterId}`, [{\n    function: removeMonHandler,\n    data: monElement,\n  }]);\n};\n\nconst addMon = (mon, divId) => {\n  const monElement = document.createElement('div');\n  monElement.setAttribute('class', 'mon');\n\n  const monHeader = document.createElement('h3');\n  monHeader.setAttribute('class', 'monHeader');\n  monHeader.innerHTML = mon;\n\n  const monArt = document.createElement('image');\n  monArt.setAttribute('src', `getArt?mon=${mon}`);\n  monArt.setAttribute('alt', `Art of ${mon}`);\n\n  const monDelete = document.createElement('button');\n  monDelete.setAttribute('class', 'monDelete');\n  monDelete.setAttribute('type', 'button');\n  monDelete.innerHTML = 'x';\n  monDelete.addEventListener('click', () => removeMonFromRoster(mon, monElement));\n\n  monElement.appendChild(monHeader);\n  monElement.appendChild(monArt);\n  monElement.appendChild(monDelete);\n\n  document.getElementById(divId).appendChild(monElement);\n};\n\nconst addMonHandler = (obj, mon, response) => {\n  if (response.status !== 204) {\n    return obj;\n  }\n\n  return addMon(mon);\n};\n\nconst updateRosterDisplay = (obj, id) => {\n  if (obj.id) {\n    return;\n  }\n\n  const roster = JSON.stringify(obj.roster);\n  rosterStr = roster;\n  rosterId = id;\n\n  obj.roster.forEach((mon) => {\n    addMon(mon, 'rosterDisplay');\n  });\n};\n\nconst handleRoster = (rosterForm) => {\n  const select = rosterForm.querySelector('select');\n  const action = select.options[select.selectedIndex].getAttribute('action');\n  const method = select.options[select.selectedIndex].getAttribute('method');\n\n  const id = document.getElementById('idField').value;\n\n  // console.log(`action: ${action}, method: ${method}`);\n  if (method === 'get') {\n    sendFetch(`${action}?id=${id}`, [{\n      function: updateTextFromJSON,\n      data: 'rosterResponse',\n    }, {\n      function: updateRosterDisplay,\n      data: id,\n    }]);\n  } else {\n    sendPost(action, `id=${id}&roster=${rosterStr}`, [{\n      function: updateTextFromJSON,\n      data: 'rosterResponse',\n    }]);\n  }\n};\n\nconst addMonToRoster = () => {\n  const mon = document.getElementById('monInput').value;\n  sendPost('addMon', `?d=${rosterId}&mon=${mon}`, [{\n    function: addMonHandler,\n    data: mon,\n  }, {\n    function: updateTextFromJSON,\n    data: 'addResponse',\n  }]);\n};\n\nconst init = () => {\n  const rosterForm = document.querySelector('#rosterForm');\n\n  const submitRosterForm = (e) => {\n    e.preventDefault();\n    handleRoster(rosterForm);\n    return false;\n  };\n\n  rosterForm.addEventListener('submit', submitRosterForm);\n\n  const addForm = document.querySelector('#addMonForm');\n\n  const submitAddForm = (e) => {\n    e.preventDefault();\n    addMonToRoster();\n    return false;\n  };\n\n  addForm.addEventListener('submit', submitAddForm);\n};\n\nwindow.onload = init;\n\n\n//# sourceURL=webpack://draft-helper-api/./client/client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/client.js"]();
/******/ 	
/******/ })()
;