/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/client.js":
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/***/ (() => {

eval("/* eslint-env browser */\n// above line acquired from https://eslint.org/docs/latest/use/configure/language-options\n\n// state needed to track roster contents\n// and roster id\nlet rosterStr = '';\nlet rosterId = '';\n\n/*\nSummary:\n- all purpose response handler for json\n- can choose not to parse response\n- accepts handler array of handler objects:\n  - function and accompanying data\n*/\nconst handleResponse = async (response, parseResponse, handlers) => {\n  if (parseResponse) {\n    let obj = {};\n\n    // adds message for update code\n    if (response.status === 204) {\n      obj.message = 'Success - Updated';\n    } else {\n      obj = await response.json();\n    }\n\n    handlers.forEach((handler) => {\n      handler.function(obj, handler.data, response);\n    });\n  } else { // don't parse!\n    handlers.forEach((handler) => {\n      handler.function(response, handler.data);\n    });\n  }\n};\n\n/*\nSummary:\n- all purpose fetch for get and head requests\n- accepts handlers for handling response\n- allows for different type (not needed curently, but nice to have)\n*/\nconst sendFetch = async (action, handlers, shouldParse = true, type = 'application/json') => {\n  const response = await fetch(action, {\n    method: 'get',\n    headers: {\n      Accept: type,\n    },\n  });\n\n  handleResponse(response, shouldParse, handlers);\n};\n\n/*\nSummary:\n- json-purpose fetch for posting\n- sends body in url query format\n- accepts handlers for handling response\n*/\nconst sendPost = async (action, body, handlers) => {\n  const response = await fetch(action, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Accept: 'application/json',\n    },\n    body,\n  });\n\n  handleResponse(response, true, handlers);\n};\n\n// requires string id of html element\nconst updateText = (message, id) => {\n  const responseElement = document.getElementById(id);\n\n  responseElement.innerHTML = message;\n};\n\n// requires string id of html element\n// used after parsing response\nconst updateTextFromJSON = (obj, id) => {\n  updateText(obj.message, id);\n};\n\n/*\nSummary:\n- update global roster id as handler function\n*/\nconst setRosterID = (obj, id) => {\n  rosterId = id;\n  return obj;\n};\n\n/*\nSummary:\n- straight up removes the .mon container element provided\n- and deletes the mon from the roster string\n*/\nconst removeMon = (mon, monElement) => {\n  rosterStr.replace(mon, '');\n\n  return monElement.remove();\n};\n\n/*\nSummary:\n- Removes the element as a handler\n- requires data to hold both the mon name and the .mon conatiner element\n*/\nconst removeMonHandler = (obj, data, response) => {\n  if (response.status !== 204) {\n    return obj;\n  }\n\n  return removeMon(data.mon, data.monElement);\n};\n\n/*\nSummary:\n- calls the post request with removeMonHandler as the handler function\n*/\nconst removeMonFromRoster = (mon, monElement) => {\n  sendPost('removeMon', `mon=${mon}&id=${rosterId}`, [{\n    function: removeMonHandler,\n    data: {\n      monElement,\n      mon,\n    },\n  }]);\n};\n\n/*\nSummary:\n- A handler function to take in an html element and add a url for a new resource into its src\n- the resource comes from a provided url\n- code largely worked from https://stackoverflow.com/questions/47001306/display-png-from-http-get-request\n*/\nconst updateImg = (obj, element) => {\n  if (!obj.url) return;\n\n  fetch(obj.url).then((response) => response.blob()).then((blob) => {\n    const img = URL.createObjectURL(blob);\n    element.setAttribute('src', img);\n  });\n};\n\n/*\nSummary:\n- creates container alongside children:\n  - header\n  - image\n  - delete button\n*/\nconst addMon = (mon, divId) => {\n  const monElement = document.createElement('div');\n  monElement.setAttribute('class', 'mon');\n\n  const monHeader = document.createElement('h3');\n  monHeader.setAttribute('class', 'monHeader');\n  monHeader.innerHTML = mon;\n\n  const monArt = document.createElement('img');\n  monArt.setAttribute('alt', `Art of ${mon}`);\n  monArt.setAttribute('height', '95px');\n  monArt.setAttribute('width', '95px');\n  sendFetch(`getArt?mon=${mon}`, [\n    {\n      function: updateImg,\n      data: monArt,\n    },\n  ]);\n\n  const monDelete = document.createElement('button');\n  monDelete.setAttribute('class', 'monDelete');\n  monDelete.setAttribute('type', 'button');\n  monDelete.innerHTML = 'x';\n  monDelete.addEventListener('click', () => removeMonFromRoster(mon, monElement));\n\n  monElement.appendChild(monHeader);\n  monElement.appendChild(monArt);\n  monElement.appendChild(monDelete);\n\n  document.getElementById(divId).appendChild(monElement);\n};\n\n/*\nSummary:\n- calls add mon as a handler function\n*/\nconst addMonHandler = (obj, mon, response) => {\n  if (response.status !== 204) {\n    return obj;\n  }\n\n  return addMon(mon, 'rosterDisplay');\n};\n\n/*\nSummary:\n- updates the roster display element by adding each mon in the roster\n*/\nconst updateRosterDisplay = (obj, id) => {\n  const displayId = 'rosterDisplay';\n\n  document.getElementById(displayId).innerHTML = '';\n\n  if (obj.id) {\n    return;\n  }\n\n  const roster = JSON.stringify(obj.roster);\n  rosterStr = roster;\n  rosterId = id;\n\n  obj.roster.forEach((mon) => {\n    addMon(mon, displayId);\n  });\n};\n\n/*\nSummary:\n- handles the click of the roster form - saving or loading!\n- getting attributes of options with code from https://www.codexworld.com/how-to/get-attribute-value-of-the-selected-option-using-javascript/\n*/\nconst handleRoster = (rosterForm) => {\n  const select = rosterForm.querySelector('select');\n  const action = select.options[select.selectedIndex].getAttribute('action');\n  const method = select.options[select.selectedIndex].getAttribute('method');\n\n  const id = document.getElementById('idField').value;\n\n  // get case\n  if (method === 'get') {\n    // handlers are updating mons on display and updating roster response text\n    sendFetch(`${action}?id=${id}`, [{\n      function: updateTextFromJSON,\n      data: 'rosterResponse',\n    }, {\n      function: updateRosterDisplay,\n      data: id,\n    }]);\n\n  } else { // post case\n    // handlers are updating roster response text and setting current roster\n    sendPost(action, `id=${id}&roster=${rosterStr}`, [{\n      function: updateTextFromJSON,\n      data: 'rosterResponse',\n    }, {\n      function: setRosterID,\n      data: id,\n    }]);\n  }\n};\n\n/*\nSummary:\n- calls post for adding a mon\n  - handlers are adding a mon as a handler and updating add text\n*/\nconst addMonToRoster = () => {\n  const mon = document.getElementById('monInput').value;\n  sendPost('addMon', `id=${rosterId}&mon=${mon}`, [{\n    function: addMonHandler,\n    data: mon,\n  }, {\n    function: updateTextFromJSON,\n    data: 'addResponse',\n  }]);\n};\n\n/*\nSummary:\n- called at onload\n- adds event listeners to buttons\n*/\nconst init = () => {\n  const rosterForm = document.querySelector('#rosterForm');\n\n  const submitRosterForm = (e) => {\n    e.preventDefault();\n    handleRoster(rosterForm);\n    return false;\n  };\n\n  rosterForm.addEventListener('submit', submitRosterForm);\n\n  const addForm = document.querySelector('#addMonForm');\n\n  const submitAddForm = (e) => {\n    e.preventDefault();\n    addMonToRoster();\n    return false;\n  };\n\n  addForm.addEventListener('submit', submitAddForm);\n};\n\nwindow.onload = init;\n\n\n//# sourceURL=webpack://draft-helper-api/./client/client.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/client.js"]();
/******/ 	
/******/ })()
;